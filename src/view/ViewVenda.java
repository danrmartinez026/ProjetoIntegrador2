/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import models.Cliente;
import javax.swing.table.DefaultTableModel;
import dao.DaoCliente;
import dao.DaoLivro;
import models.Venda;
import java.util.logging.Level;
import java.util.logging.Logger;
import models.Livro;
import models.ItemVenda;
import service.ServiceItemVenda;
import service.ServiceLivro;
import service.ServiceVenda;

/**
 *
 * @author Dan
 */
public class ViewVenda extends javax.swing.JInternalFrame {
    DetalhesLivro detalhesLivro = null;
    private TelaPrincipal parent;
    Venda venda = new Venda();
    public List<Cliente> pesquisaCliente;
    public List<Livro> pesquisaLivro = new ArrayList();
    public List<ItemVenda> listaItemVenda = new ArrayList();
    

    /**
     * Creates new form Venda
     */
    public ViewVenda(TelaPrincipal parent) {
        initComponents();
        this.parent = parent;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        buttonPesquisar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lCliente = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePesquisaCliente = new javax.swing.JTable();
        fCpf = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fQuantidade = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablePesquisa = new javax.swing.JTable();
        fTitulo = new javax.swing.JTextField();
        fEditora = new javax.swing.JTextField();
        comboGenero = new javax.swing.JComboBox<>();
        fAutor = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        buttonPesquisarLivro = new javax.swing.JButton();
        pesquisaDetalhada = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        buttonConcluirVenda = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCarrinho = new javax.swing.JTable();
        buttonCancelarVenda = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        buttoRetirarItem = new javax.swing.JButton();
        fValorTotal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cliente"));

        jLabel1.setText("Nome");

        jLabel2.setText("CPF");

        jButton2.setText("Cadastrar Cliente");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonPesquisar.setText("Pesquisar");
        buttonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPesquisarActionPerformed(evt);
            }
        });

        jLabel9.setText("Cliente Selecionado");

        lCliente.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        tablePesquisaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Sobrenome", "CPF"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePesquisaCliente.getColumnModel().getColumn(0).setMinWidth(0);         tablePesquisaCliente.getColumnModel().getColumn(0).setMaxWidth(0);         tablePesquisaCliente.getColumnModel().getColumn(0).setWidth(0);
        tablePesquisaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePesquisaClienteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablePesquisaCliente);

        try {
            fCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fCpf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fCpfKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(31, 31, 31)
                        .addComponent(fNome, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2)
                        .addGap(33, 33, 33)
                        .addComponent(fCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(buttonPesquisar))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel9)
                                .addComponent(lCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(fCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 26, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        fNome.setTransferHandler(null);
        fCpf.setTransferHandler(null);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Produto"));

        jLabel4.setText("Titulo");

        jLabel5.setText("Editora");

        jLabel8.setText("  Quantidade");

        fQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fQuantidadeActionPerformed(evt);
            }
        });
        fQuantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fQuantidadeKeyTyped(evt);
            }
        });

        tablePesquisa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Titulo", "Editora", "Autor", "Genero", "Edição", "Estoque", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePesquisa.setToolTipText("");
        tablePesquisa.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablePesquisa.getColumnModel().getColumn(0).setMinWidth(0);         tablePesquisa.getColumnModel().getColumn(0).setMaxWidth(0);         tablePesquisa.getColumnModel().getColumn(0).setWidth(0);
        tablePesquisa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePesquisaMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablePesquisaMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tablePesquisa);

        fTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fTituloActionPerformed(evt);
            }
        });

        fEditora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fEditoraActionPerformed(evt);
            }
        });

        comboGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONAR", "Drama", "Romance", "Aventura", "Sci-fi" }));
        comboGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboGeneroActionPerformed(evt);
            }
        });

        fAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fAutorActionPerformed(evt);
            }
        });

        jLabel10.setText("Autor");

        jLabel11.setText("Genero");

        buttonPesquisarLivro.setText("Pesquisar");
        buttonPesquisarLivro.setEnabled(false);
        buttonPesquisarLivro.setName(""); // NOI18N
        buttonPesquisarLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPesquisarLivroActionPerformed(evt);
            }
        });

        pesquisaDetalhada.setText("Mais Detalhes");
        pesquisaDetalhada.setEnabled(false);
        pesquisaDetalhada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisaDetalhadaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(fAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(fTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(jLabel5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11))))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonPesquisarLivro)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8)
                                .addComponent(fQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(pesquisaDetalhada)
                        .addGap(23, 23, 23))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(fAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(fEditora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pesquisaDetalhada)))
                        .addGap(20, 20, 20)
                        .addComponent(buttonPesquisarLivro)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(fQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        fQuantidade.setTransferHandler(null);
        fTitulo.setTransferHandler(null);
        fEditora.setTransferHandler(null);
        fAutor.setTransferHandler(null);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Carrinho"));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Valor Total");

        buttonConcluirVenda.setText("Concluir Venda");
        buttonConcluirVenda.setEnabled(false);
        buttonConcluirVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConcluirVendaActionPerformed(evt);
            }
        });

        tableCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Título", "Autor", "Editora", "ISBN", "Quantidade", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCarrinho.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableCarrinho.getColumnModel().getColumn(0).setMinWidth(0);         tableCarrinho.getColumnModel().getColumn(0).setMaxWidth(0);         tableCarrinho.getColumnModel().getColumn(0).setWidth(0);
        jScrollPane3.setViewportView(tableCarrinho);

        buttonCancelarVenda.setText("Cancelar Venda");
        buttonCancelarVenda.setEnabled(false);
        buttonCancelarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarVendaActionPerformed(evt);
            }
        });

        buttonAdd.setText("Adicionar Item");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttoRetirarItem.setText("Retirar Item");
        buttoRetirarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttoRetirarItemActionPerformed(evt);
            }
        });

        fValorTotal.setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(buttonCancelarVenda)
                .addGap(51, 51, 51)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(fValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addComponent(buttonConcluirVenda)
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(buttoRetirarItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonAdd)
                .addGap(111, 111, 111))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd)
                    .addComponent(buttoRetirarItem))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonConcluirVenda)
                        .addComponent(buttonCancelarVenda))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(fValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("         Vendas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void buttonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPesquisarActionPerformed
        // atribui valor nulo a uma lista de clientes a ser preenchido
        pesquisaCliente = null;
        
        // instancia um modelo de tabela com os parametros da tabela modelada 
        // no projeto visual
        DefaultTableModel model = (DefaultTableModel) tablePesquisaCliente.getModel();
        // zera a quantidade de linhas da tabela
        model.setRowCount(0);
        
        
        try {
            // pesquisa cliente no banco de dados,usando apenas nome e cpf
            // e preenche a lista de clientes com os resultados retornados
            pesquisaCliente = DaoCliente.procurarCliente(fNome.getText(), ""
                    , fCpf.getText());
        } catch (Exception ex) {
            Logger.getLogger(ViewVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        // confere a lista de clientes nao esta nula
        if(pesquisaCliente == null){
            JOptionPane.showMessageDialog(this, "Nenhum resultado obtido");
        } else {
            // se a lista tiver algum conteudo, por meio de iteracao
            // sera preenchida a tabela com os clientes da lista
            for(int i = 0; i < pesquisaCliente.size(); i++){
                Cliente cliente = pesquisaCliente.get(i);
                if(cliente != null){
                    Object[] row = new Object[4];
                    row[0] = cliente.getId();
                    row[1] = cliente.getNome();
                    row[2] = cliente.getSobrenome();
                    row[3] = cliente.getCpf();
                    model.addRow(row);
                }
            }
        }
    }//GEN-LAST:event_buttonPesquisarActionPerformed

    private void tablePesquisaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePesquisaMouseClicked
        // libera o botao de pesquisa quando o usuario clicar em um livro
        // na lista de livros
        pesquisaDetalhada.setEnabled(true);
        
    }//GEN-LAST:event_tablePesquisaMouseClicked

    private void tablePesquisaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePesquisaMouseReleased
    }//GEN-LAST:event_tablePesquisaMouseReleased

    private void fTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fTituloActionPerformed
    }//GEN-LAST:event_fTituloActionPerformed

    private void fEditoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fEditoraActionPerformed
    }//GEN-LAST:event_fEditoraActionPerformed

    private void comboGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboGeneroActionPerformed
    }//GEN-LAST:event_comboGeneroActionPerformed

    private void fAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fAutorActionPerformed
    }//GEN-LAST:event_fAutorActionPerformed

    
    
    
    private void buttonPesquisarLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPesquisarLivroActionPerformed
        // atribui valor nulo para uma lista de livros a ser preenchida
        pesquisaLivro = null;
        
        // instancia um modelo de tabela com os parametros da tabela modelada 
        // no projeto visual
        DefaultTableModel model = (DefaultTableModel) tablePesquisa.getModel();
        model.setRowCount(0);
        
        
        try {
            // pesquisa no banco de dados os livros que coincidir com os paramentros
            // informados ( titulo , autor , editora e genero)
            pesquisaLivro = DaoLivro.procurarLivro(fTitulo.getText(), fAutor.getText()
                    , fEditora.getText(),comboGenero.getSelectedItem().toString());
        } catch (Exception ex) {
            Logger.getLogger(ViewVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // verifica se a lista de livros esta nula
        if(pesquisaLivro == null){
            JOptionPane.showMessageDialog(this, "Preencha ao menos um campo de pesquisa");
        } else {
            // contendo ao menos um livro na lista, itera-se pela lista afim de 
            // preencher a tabela de livros
            for(int i = 0; i < pesquisaLivro.size(); i++){
                Livro liv = pesquisaLivro.get(i);
                if(liv != null){
                    Object[] row = new Object[8];
                    row[0] = liv.getId();
                    row[1] = liv.getTitulo();
                    row[2] = liv.getEditora();
                    row[3] = liv.getAutor();
                    row[4] = liv.getGenero();
                    row[5] = liv.getEdicao();
                    row[6] = liv.getEstoque();
                    row[7] = Double.valueOf(liv.getValor());
                    model.addRow(row);
                }
            }
        }
        // trava o botao de detalhes para ser somente liberado quando o usuario 
        // clicar em algum livro na tabela
        pesquisaDetalhada.setEnabled(false);
    }//GEN-LAST:event_buttonPesquisarLivroActionPerformed

    private void tablePesquisaClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePesquisaClienteMouseClicked
        try{
            // instancia primeriamente como nulo, um cliente para receber o cliente
            // selecionado pelo usuario atraves de um clique na tabela de cliente
            Cliente cliente = null;
            // itera por todos os clientes existentes no banco de dados, procurando
            // pelo id do cliente selecionado elo cliente na tabela de clientes
            for(Cliente cli: DaoCliente.listar()){
                if(cli.getId() == Integer.parseInt(tablePesquisaCliente.getValueAt
                  (tablePesquisaCliente.getSelectedRow(), 0).toString())){
                    // uma vez encontrado o cliente sera atribuido a variavel cliente
                    cliente = cli;
                    // quebra a iteracao qnd encontrado o cliente
                    break;
                }
            }
            // atribui o cliente na venda
            venda.setCliente(cliente);
        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e.getMessage(),"Erro", 
            JOptionPane.ERROR_MESSAGE);
        }
        // adiciona o nome do cliente em uma label afim de destacar o mesmo
        lCliente.setText(venda.getCliente().getNome()
        + (" ") + venda.getCliente().getSobrenome());
       
        // instancia um modelo de tabela, para apagar o resultados da pesquisa de cliente
        // e deixar apenas o cliente escolhido para tornar assim mais claro que o cliente
        // foi selecionado para venda
        DefaultTableModel model = (DefaultTableModel) tablePesquisaCliente.getModel();
        for(int i = 0; i < model.getRowCount(); i++){
            // apaga todos os clientes da lista menos o selecionado 
            if(i != tablePesquisaCliente.getSelectedRow()){
                model.removeRow(i);
            }
        }
        
        // libera a pesquisa de livro para proseguir com a venda
        buttonPesquisarLivro.setEnabled(true);
        
    }//GEN-LAST:event_tablePesquisaClienteMouseClicked

    private void pesquisaDetalhadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisaDetalhadaActionPerformed
        try{
            // verifica se o usuario clicou em algum item na tabela de livros
            // para capturar o id selecionado caso haja confirmacao positiva
            int id = pesquisaLivro.get(tablePesquisa.getSelectedRow()).getId();
            if(id >= 0){
                // itera por todos os livros disponiveis no banco de dados
                for(Livro livro : DaoLivro.listar()){
                    // procura pelo livro escolhido na tabela
                    if(id == livro.getId()){
                        // abre uma nova tela com os detalhes do livro selecionado
                        // e permite a atualizacao do mesmo
                        parent.abrirTelaDetalhesLivro(livro);
                        // zera a tabela a de livros
                        DefaultTableModel model = (DefaultTableModel) tablePesquisa.getModel();
                        model.setRowCount(0);
                        // bloqueia o botao de pesquisa
                        pesquisaDetalhada.setEnabled(false);
                        break;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione 1 item para exibir detalhes");
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(rootPane, e.getMessage(),"Erro", 
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pesquisaDetalhadaActionPerformed

    
    // cria uma mascara para o campo cpf onde serao aceitos no maximo 11 numeros
    private void fCpfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fCpfKeyTyped
        Character ch = evt.getKeyChar();
        String permitidos = "0123456789";
        if(!permitidos.contains(ch.toString())){
            evt.consume();
        }

        if(fCpf.getText().length() == 11){
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Maximo 11 Numeros");
        }
    }//GEN-LAST:event_fCpfKeyTyped

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // verifica se algum livro foi selecionado
        if(tablePesquisa.getSelectedRow() < 0){
            JOptionPane.showMessageDialog(rootPane, "Selecione um Livro");
            return;
        // verifica se uma quantidade foi selecionada    
        } else if(fQuantidade.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane, "Selecione uma quantidade");
            return;
            
        } else if(Integer.parseInt(fQuantidade.getText()) <= 0){
            JOptionPane.showMessageDialog(this,"Selecione uma quantidade maior que 0");
            return;
        // verifica se a quantidade digitada e maior do que o estoque do livro selecionado    
        } else if(Integer.parseInt(tablePesquisa.getValueAt(tablePesquisa.getSelectedRow(), 6).toString()) < Integer.parseInt(fQuantidade.getText())){
            JOptionPane.showMessageDialog(rootPane, "Quantidade solicitada acima do estoque atual");
            
        
        } else {
            // inicializa o item para receber o livro e a quantidade selecionados
            ItemVenda item = new ItemVenda();
            
            //insere um livro, uma quantidade e o valor do produto naquele momento da venda 
            //no arraylist de item
            try {
                // busca pelo id do livro selecionado na tabela para compara-lo 
                // no banco de dados de livros, quando encontrado insere o mesmo 
                // no item de venda juntamente com a quantidade e o valor
                // do livro naquele momento da venda
                for(Livro livro : DaoLivro.listar()){
                    if(Integer.parseInt(tablePesquisa.getValueAt(tablePesquisa.getSelectedRow(),0).toString()) == livro.getId()){
                        item.setLivro(livro);
                        item.setQuantidade(Integer.parseInt(fQuantidade.getText()));
                        item.setValorUnitario(Float.parseFloat(tablePesquisa.getValueAt(tablePesquisa.getSelectedRow(),7).toString()));
                        break;
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(ViewVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
            
//            if(item.getLivro() == null){
//            JOptionPane.showMessageDialog(this,"Selecione um livro");
//            }
            
            // cria um valor booleano para filtrar a insercao do item venda
            // em casos especificos
            boolean add = true;
            // itera pelos itens de venda
            for(ItemVenda itemVenda : listaItemVenda){
                
                // verifica se ha um item identico ja inserido na lista de itens
                // se houver, imediatamente anula a insercao do item e exibi uma
                // mensagem de aviso ao usuario
                if(itemVenda.getLivro().getId() == item.getLivro().getId() 
                        && itemVenda.getQuantidade() == item.getQuantidade() ){
                    JOptionPane.showMessageDialog(this,"Selecione um livro diferente ou uma quantidade diferente");
                    return;
                    // verifica se ha um item de venda com o mesmo livro porem uma quantidade 
                    // diferente da registrada, em caso de confirmacao positiva
                    // o item de venda tera a quantidade alterada e o booleano 
                    // sera alterado para falso afim de evitar um insercao desnecessario
                    // do item na lista de itens de venda
                } else if(itemVenda.getLivro().getId() == item.getLivro().getId()){
                    itemVenda.setQuantidade(item.getQuantidade());
                    add = false;
                } 
            }
            
//            if(item != null){
//                for(ItemVenda itemVenda:listaItemVenda){
//                    if(item.getLivro().getId() == itemVenda.getLivro().getId()){
//                        itemVenda.setQuantidade(item.getQuantidade());
//                        return;
//                    }
//                }
//            }
            // verifica se a lista esta vazia ou se o booleano permite a insercao
            // do item na lkista de itens de venda
            if(listaItemVenda.isEmpty() || add){
                listaItemVenda.add(item);
            }
        
            
            
//            try{
//                ServiceItemVenda.inserirItemVenda(item , venda);
//            } catch (Exception e){
//                JOptionPane.showMessageDialog(rootPane, e.getMessage(),"Erro", 
//                JOptionPane.ERROR_MESSAGE);
//                return;
//            }
            
            // verifica se o item de venda possui um livro atribuido
            if(item.getLivro() != null){
                // instancia um modelo de tabela com os parametros da tabela modelada 
                // no projeto visual
                DefaultTableModel model = (DefaultTableModel) tableCarrinho.getModel();
                model.setRowCount(0);
                // itera por todos os itens de venda na lista, assim preenchendo a tabela
                // carrinho de compras
                for(int i = 0; i < listaItemVenda.size(); i++){
                    Livro liv = listaItemVenda.get(i).getLivro();
                    if(liv != null){
                        Object[] row = new Object[7];
                        row[0] = liv.getId();
                        row[1] = liv.getTitulo();
                        row[2] = liv.getEditora();
                        row[3] = liv.getAutor();
                        row[4] = liv.getIsbn();
                        row[5] = listaItemVenda.get(i).getQuantidade();
                        row[6] = Double.valueOf(liv.getValor()) * listaItemVenda.get(i).getQuantidade();
                        model.addRow(row);
                    }
                }
            }
            
            Double valorTotal = 0.0;
            for(ItemVenda itemVenda : listaItemVenda){
                valorTotal = (valorTotal + (Double.valueOf(itemVenda.getLivro().getValor()))  * itemVenda.getQuantidade());
            }
            venda.setValor(valorTotal.toString());
            DecimalFormat df = new DecimalFormat("##,###.##");  
            fValorTotal.setText(df.format(valorTotal));
            buttonConcluirVenda.setEnabled(true);
            buttonCancelarVenda.setEnabled(true);
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void fQuantidadeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fQuantidadeKeyTyped
        Character ch = evt.getKeyChar();
        String permitidos = "0123456789";
        if(!permitidos.contains(ch.toString())){
            evt.consume();
        }

        if(fQuantidade.getText().length() == 3){
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Maximo 3 Digitos");
        }
    }//GEN-LAST:event_fQuantidadeKeyTyped

    private void buttonConcluirVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConcluirVendaActionPerformed
        
        
        
        
        
//        if(tableCarrinho.getRowCount() >= 1){    
//            for(int i = 0;i < tableCarrinho.getRowCount();i++){
//                ItemVenda item = new ItemVenda();
//                try {
//                    item.setLivro(DaoLivro.obter((int)tableCarrinho.getValueAt(i, 0)));
//                    item.setQuantidade((int)tableCarrinho.getValueAt(i, 5));
//                    item.setValorUnitario((float)tableCarrinho.getValueAt(i, 6));
//                    DaoItemVenda.inserirItemVenda(1 , item);
//                } catch (Exception ex) {
//                    Logger.getLogger(ViewVenda.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        }
        
        
        try{
            
            // verifica se o carrinho esta vazio
            if(tableCarrinho.getRowCount() > 0){
                // adiciona a data listada na hora da compra
                venda.setData(new Date());
                // pergunta se o usuario quer encerrar a venda
                if(JOptionPane.showConfirmDialog(parent, "Dedeja concluir a venda") == 0){
                   // recebe o id da venda gerada no banco de dados para inserir no item venda
                    int id = ServiceVenda.inserirVenda(venda);
                    
                // itera pelo carrinho de compras para popular o item de venda e inserir
                // o mesmo no banco de dados juntamente ao id da venda
                    for(int i = 0;i < tableCarrinho.getRowCount();i++){
                        // instancia o item de venda
                        ItemVenda item = new ItemVenda();
                        try {
                            // popula o item de venda
                            item.setLivro(DaoLivro.obter((int)tableCarrinho.getValueAt(i, 0)));
                            item.setQuantidade((int)tableCarrinho.getValueAt(i, 5));
                            item.setValorUnitario(Float.parseFloat(tableCarrinho.getValueAt(i, 6).toString()));
                            // insere ele no banco de dados
                            ServiceItemVenda.inserirItemVenda(id, item);
                            // atualiza o estoque do produto apos ter sido efetuada a compra
                            ServiceLivro.atualizarEstoque(item.getLivro(), item.getQuantidade());

                        this.dispose();
                        } catch (Exception ex) {
                            Logger.getLogger(ViewVenda.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane,"Carrinho vazio");
            }
        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e.getMessage(),"Erro", 
            JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonConcluirVendaActionPerformed

    private void buttonCancelarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarVendaActionPerformed
        if(JOptionPane.showConfirmDialog(parent, "Deseja cancelar a venda") == 0){
            this.dispose();
        }
    }//GEN-LAST:event_buttonCancelarVendaActionPerformed

    private void fQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fQuantidadeActionPerformed
    }//GEN-LAST:event_fQuantidadeActionPerformed

    private void buttoRetirarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttoRetirarItemActionPerformed
        if(tableCarrinho.getSelectedRow() < 0){
            JOptionPane.showMessageDialog(rootPane, "Selecione um item para Excluir");
        } else{
            for(ItemVenda item: listaItemVenda){
                if(item.getLivro().getId() == tableCarrinho.getValueAt(tableCarrinho.getSelectedRow(), 0)){
                    listaItemVenda.remove(item);
                    break;
                }
            }
            DefaultTableModel model = (DefaultTableModel) tableCarrinho.getModel();
            model.setRowCount(0);
            for(int i = 0; i < listaItemVenda.size(); i++){
                Livro liv = listaItemVenda.get(i).getLivro();
                if(liv != null){
                    Object[] row = new Object[7];
                    row[0] = liv.getId();
                    row[1] = liv.getTitulo();
                    row[2] = liv.getEditora();
                    row[3] = liv.getAutor();
                    row[4] = liv.getIsbn();
                    row[5] = listaItemVenda.get(i).getQuantidade();
                    row[6] = Double.valueOf(liv.getValor()) * listaItemVenda.get(i).getQuantidade()+ 0.00d;
                    model.addRow(row);
                }
            }
            
            if(model.getRowCount() == 0){
                fValorTotal.setText("");
            } else {
                Double valorTotal = 0.0;
                for(ItemVenda itemVenda : listaItemVenda){
                    valorTotal = Double.valueOf(valorTotal + itemVenda.getLivro().getValor()) * (itemVenda.getQuantidade());
                }
                venda.setValor(valorTotal.toString());
                DecimalFormat df = new DecimalFormat("#.##0.00");  
                fValorTotal.setText(df.format(valorTotal));
            }
        }
    }//GEN-LAST:event_buttoRetirarItemActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        parent.abrirTelaCadastroCliente();
    }//GEN-LAST:event_jButton2ActionPerformed
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttoRetirarItem;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCancelarVenda;
    private javax.swing.JButton buttonConcluirVenda;
    private javax.swing.JButton buttonPesquisar;
    private javax.swing.JButton buttonPesquisarLivro;
    private javax.swing.JComboBox<String> comboGenero;
    private javax.swing.JTextField fAutor;
    private javax.swing.JFormattedTextField fCpf;
    private javax.swing.JTextField fEditora;
    private javax.swing.JTextField fNome;
    private javax.swing.JTextField fQuantidade;
    private javax.swing.JTextField fTitulo;
    private javax.swing.JTextField fValorTotal;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lCliente;
    private javax.swing.JButton pesquisaDetalhada;
    private javax.swing.JTable tableCarrinho;
    private javax.swing.JTable tablePesquisa;
    private javax.swing.JTable tablePesquisaCliente;
    // End of variables declaration//GEN-END:variables
}
